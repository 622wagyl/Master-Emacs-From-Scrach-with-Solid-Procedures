* 00.Preface
“零秒”乃直觉力,有效应用我们的直觉的巨大力量, 而不必案牍劳形, 悬梁刺股,
起标题真煞费脑筋,
若标题为“应用直觉思维和潜意识的力量, 在Emacs上精进", 则真是啰里啰嗦；
或者直觉力精通Emacs,则语法不通. 此处的“零秒”即“intuition"而“instant" 灵犀一点通； 非物理概念上的“零秒”；
步步为营, 仿照曾国藩的战术“结硬寨, 打呆仗”, 初时很慢, 待工事渐成, 则坚不可摧；
同时努力学习SICP的策略, 首先抛出点滴星火，再看时，已成燎原之势。
以直觉力为基础，步步为营，稳扎稳打，构筑Emacs技能。

是为序.

Emacs的简单, 则一言以蔽之, Meta键也.
Meta键(键盘上的option/alter键)
Meta的词源含义是higher, beyond,可以理解为没有最高,只有更高.
中文译为"元", 发端处, 源头处;
So Meta is source, and it relates to source code.
Meta关联src-code, 而function又是code的first-class-citizen; 设置Meta直接调用function顺理成章.
M-x (x for execucte), 在此之后, 便可以天马行空的查询要做的事情,
比如插入当前的日期:

至此, Emacs从战略层面上的所有事情便结束了, 剩下的事情仅仅是战术层面上的高效问题与缝缝补补的实现.

*Emacs的第一个策略: 引入Ctrl键*

比如从目录中打开一个文件, 可以M-x find-file,
需要键入十一个字符 Ctrl策略, 可以C-x C-f. 只需要键入4个字符.
sequnces调用functions的过程, 称之为Command. Command=Contrl, 由此也能反过来看到选择Ctrl键也是语义绑定.
* 01.Semantic Keybinding

Emacs从最源头处, 用Meta-Execte调用所有的function; 然后通过定义Ctrl的技术, 简化Meta的流程.

正文从语义化快捷键入手, 辅助在5分钟之内永久记忆(Never have a second look), 20多个一级快捷键(高频), 30几个二级绑定键(中频), 闲看三级快捷键(低频); 以及按照功能, 按照目的, 按照插件分类的表格.
答题区上表格和秒记方法.


C-x, C-h的区别, 一级绑定, 将C-x中的x去掉, 只剩下
从character讲起, meta的词源是higher,


与vim的关键区别是绑定的键是有具体含义,可逻辑, 可推导.

 character, word, line, sentence, page, article.

一级绑定之cursor光标的移动: (高频)
在一级绑定中, C-x, M-x中的x(execute)省略, 简化为C-与M-x;
光标操作的对象:
character, word, line, sentence, (*paragragh),
page, buffer.

1. Character and Word
C-f (M-x forward-char) 向前移动一个字符的位置
C-b (M-x backword-char) 向后移动一个字符的位置
char是最小的操作单元, char之上则是word, 回顾上文阐述的meta的词源含义是higher,因此Meta绑定相同的键, 范围要比Ctrl更大一点, 由此, 比char大一级的是word
M-f (M-x forward-word) 向前移动一个单词的位置.
M-b (M-x backword-word) 向后移动一个单词的位置.

2. line and sentence.
C-e (e for end) move to end of line,
C-a (a for ahead) move to ahead of line
同样的逻辑,Meta比Ctrl的范围高一个等级
M-a move to ahead of the sentence
M-e move to end of the sentence.

以上两点为光标在水平方向的移动(horizontal), 与之相对应的纵向(Vertiallly)移动的操作.

3. Vertical Movement between lines
C-n (调用function next-line), 向下移动一行
C-p (previous-line)
接下来, 有意思的事情来了.
由character和line操作可知, 绑定相同的键, Meta的作用范围总是比Ctrl更高一级, 但是此时查看:
M-p
M-n
发现Emacs没有定义这两个key-sequnces, 根据前面的逻辑, M-p应该向上移动更多行, 至少比一行要多; Emacs竟然没有定义, 这真是千载难逢的良机.
暂时按下不表, 先小结Ctrl的光标操作. Ctrl能操作的最大单位是line, 更大范围的光标动作交由Meta完成.

4. Vertically Page Down and Up
向上翻页M-v, v当然是vertical, 而Meta是higher, 往更高处纵向移动, 当然便是UP,
那么向下呢? 既然Meta相对于Ctrl而higher, 反过来Ctrl则是Lower;
因此向下翻页是C-v.
此处的心思, 一级绑定, 始终用最少的动作, 最少的触发键, 如果绑定三个键, 则不需要Ctrl的参与.
M-v-u(up), M-v-d(down)向下.
M-v与C-v辅助便利地向上和向下翻页, 问题是他们是整屏, 整屏地翻页, 大多数时候, 这不是我们想要的. 我要半屏半屏的翻页.

现在重新回到M-p与M-n, 绑定半屏翻页.

#+begin_src emacs-lisp :session sicp :lexical t
(defun scroll-half-page-down ()
  "scroll down half the page"
  (interactive)
  (scroll-down (/ (window-body-height) 2)))

(defun scroll-half-page-up ()
  "scroll up half the page"
  (interactive)
  (scroll-up (/ (window-body-height) 2)))

(global-set-key "\M-n" 'scroll-half-page-up)
(global-set-key "\M-p" 'scroll-half-page-down)
#+end_src

#+BEGIN_QUOTE 备注
因为设置了触控板(或者鼠标)Invert scroll direction(Natural Scrolling), 因此up与down是反着映射到next和previous的
#+END_QUOTE

5.Buffer
M-<, to the biginning of the buffer
M->, to the end of the buffer.
# 只要记着ctrl只管到line, 其余全部都是Higher的Meta的工作.
* 02.Emacs as an Editor
[[01.semantic keybinding]] 初窥了Emacs简单易用的特性之一便是语义化键绑定,
语义化包含两个方面:
1) Character keys的语义化, 这一点明了易懂, n for next, p for previous; 而非j for next, k for previous.
2) Control keys的语义化, 求根问底Meta的词源, 病以meta的higher(beyond)基石; 不仅可以不费力的记住Cursor操作, 依照同样的逻辑, 可以拆解全部的内置快捷键.

移动Cursor的目的, 一则为浏览阅读, 二则为编辑做准备, 是编辑的前驱步骤.
当聊起编辑器时候, 一个著名的段子"Emacs不是好的编辑器, 而是一个操作系统"; 如果追问一句"请问, 您对编辑器定义是什么?", 立刻会发现所谓编辑器圣战, 便是茶余饭后的小品或者群口相声, 以"段子", 调剂案牍劳累. (vim作为编辑器, 对用户就如电脑开机键, 难说会不会的问题; 比如linux认证, 都只有vim的要求)

"When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.", 编辑器的基本功能曲指可数.

编辑器的基本功能:
以行为单位,
复制, 黏贴, 增删改查, 其中查是关键, 应该放在前面
对文本的初始是最关键的一点, Linux基于流管理.

+ 最基本
  - 复制黏贴 (M-w, C-y)
+ 增删改查
  - insert (C-q quotation)
  - delete(C M d delele), kill ring
  - modify(undo, transpose, uppercase, lowercase, title,
  - Search(Swiper…)
+ Arguments
  - Numeric arguents C-u
  - Repeat C-x z

+ Completion(yasnippet)
  - indentation (M-i 缓解小指的负担
  - white space(C-x C-o)
  - Filling(global-visual-line-mode)
  - Spelling-checking
+ Special
  - Register

详细叙述delte
键的绑定同样遵循语义化的原则, 比如Delete(killing)
<delete>键(即backspace退格键, backword);
与C-<del> 搭配是删除一个字符,
与M-<del>则是倒退删除一个单词;
与backwords对应的是forwards,(进格删除)
C-d M-d分别进格删除一个字符和一个单词.

Killing的范围比delete大;
C-k是删除到行尾, M-k是删除到句尾, 跟前面一致. 以上是forwards进格删除,
对行的backwardst退格删除 C-x <del>

*Topic1*

这么多的键绑定, 从语义化的理解是一方面, 更重要的一方面可能应该去找捷径, 比如调用直觉和由此带来的强烈满足感和成就感.

编辑过程中对blank-lines的处理,

C-x C-o调用(delete-blank-lines)

C-x C-o的绑定键没有逻辑, o是个洞吗? 一个洞代表空行?

Emacs Manual中很多这样的处理细分领域的绑定键, 头悬梁锥刺股的用下来, 对emacs的热情和兴趣早早磨光了.

回到C-x C-o调用(delete-blank-lines)

假设有这样四行

#+BEGIN_QUOTE
"The quick brown fox jumps over the lazy dog"


"The quick brown fox jumps over the lazy dog"
#+END_QUOTE

当前的光标在第一行上的fox,后 发现两行文字中间的空行是多余的, 因此要删掉.

需要动用人肉劳力这样做:

    C-n 管标移动到下一行
    连续两次C-k删除空行
    然后凭借超强的记忆力(记住刚才是在fox的位置, 和导弹一般精确的点位控制回到fox后面.

劳神费力.

应用C-x C-o呢? 可以在第一行的任意位置上调用C-x C-o, 下面的空行会自动删除.

怎样从直觉上理解呢?

    光标在第一行的某个点上, 然后调用一个命令, 在光标之外的另外一个地方会立刻发生某件事情, 这就是远程控制呗;
    更直觉一点, 这边是"意念移物"呗,

由此从直觉里生发的成就感和兴趣会驱动我们应用更加复杂的命令和组合.

P.S. 作为对"零秒" 这个标题党的补充.


*Topic2 对比Search功能的Emacs操作与命令行操作*
Emacs的优势是对数据和查询结果的便捷二次处理.
比如想从宏观上了解下Emacs手册中中全部whitespace操作.
[[file:images/2.目录界面.png]]

可以从Terminal中完成
#+BEGIN_SRC bash
find . -type f -exec grep --color -inH --null -e  "whitespace" \{\} +
#+END_SRC
[[file:images/2.terminal界面.png]]

虽然可以看到结果, 但没法做简单的统计.
即使加上nl
#+BEGIN_SRC bash
find . -type f -exec grep --color -inH --null -e  "whitespace" \{\} + | nl
#+END_SRC
[[file:images/terminal界面2.png]]

也只能大略了解到’whitespace’在整个文档中, 有95句话提到过.

而在Emacs中执行同样的命令:
C-x grep-find;

则瞬间眼明心亮, 有95句话有一个或多个whitespace这个单词, 总计有151个. 而且在 Killing.org 这个文件中有6句话, 在 text.org 中有5句, 在 Display,org 中有17句话, 在 Program.org 中也有17句, 等等,

[[file:images/emacs界面.png]]

Emacs中执行命令的突出优势是简单方便的二次处理.

*小结*

目前的流程图 Meta --> Control ---> Cursor ---> Edit
由Meta的词源语义出发分析Emacs的快捷键绑定, 引入Ctrl键简化输入过程, 光标的移动作为edit的前置步骤, 以find-grep查询收尾基本的编辑功能.
在切入到God's Eyes(Dired) and God's Hands(Booksmarks)之前,
光速浏览File的基本操作(读取和保存)
C-x C-f (M-x find-file) 找到并打开文件
C-x C-r (r是read-only), 比如浏览自己的配置文件, 要避免无心修改掉东西.
C-x C-s (s,save) 保存单个文件
C-x s   保存全部文件, 保存全部文件功能更常用, 因此组合键也少.
最后在个人配置上添加两行, 设置自动保存文件.

#+begin_src emacs-lisp :session mm :lexical t
(setq auto-save-visited-mode t)
(auto-save-visited-mode +1)
#+end_src
以上完结, 马上进入精彩的部分.
* 03.God's Eyes and Hands by Dired and Bookmarks
** Dired初窥
在EmacsManual目录下调出Dird后,
快速略扫各个文件的主要内容.
从配置中添加下面的代码
#+begin_src emacs-lisp :session ss :lexical t
(define-minor-mode dired-follow-mode "Diplay file at point in dired after a move."
  :lighter " dired-f"
  :global t
  (if dired-follow-mode (advice-add 'dired-next-line
                                    :after (lambda (arg)
                                             (dired-display-file)))
    (advice-remove 'dired-next-line (lambda (arg)
                                      (dired-display-file)))))
#+end_src
M-x 调用 =dired-follow-mode=
x
在目录上C-n和C-p上下移动光标.

#+ATTR_HTML: :width 500px
[[file:images/pre-dired.gif]]



** Dired操作归纳:

1. Entering Dired: C-x d
2. Navigation: C-n C-p
3. Delete files: d, x, D
4. Flagging many files at once:
   1) # (file start with #)
   2) ~ (flag all backup files whose name end with ~)
   3) % d regexp (delete all match regex)

5. Visiting Files
   - f or e (visit current file)
   - o (another window to display and switch fucus)
   - C-o (visit but not switch focus)
   - v (view-mode)
   - ^ (dired-up)

6. Dired Marks vs. Flags
   - * * excutable files
   - * m mark
   - * @ symbolic link
   - * / directory
   - * u remove the current
   - U remove all
   - % m regex
7. Operatons on files
   - C copy
   - D delete
   - R rename
   - H hardlink
   - S symblic link
   - Z, c
8. Shell Commands in Dired
   - 这次阅读最大的收获, 可以直接 & 和 X
9. Transform files names
   - % u Uppper-case
   - % l lowercase
10. File comparision
   - dired-diff
11. Subdirectory in Dired
   - i
12. Subdirectories switch in Dired
   -
13. Moving Over Subdirectories
    -
14. Hiding Subdirectories
    -
15. Updating the Dired Buffer
    g
16. Dired and find
   find-name-dired
17. Editing the dired Buffer
    wdired
18. View Images thumbnails
    image-dired-display-thumb

** Register操作归纳

M-x view-register r
# 以下所有的命令最后一个letter, 可以自定义为a-z等任何字母.
1. Saving Positions in Registers
   C-x r r (register r)
   # 可以自定义为 C-x r a (能记住便好)
   C-x r j r (register jump to r)
2. Saving Text in Registers
   C-x r s t (register save to r) "text"
   # 修改为C-x r s t (t for text)
   C-x r i t (regiester insert to r) "text"
   M-x append-to-register t
   M-x prepend-to-register t
3. Saving Rectangles in Registers
   C-x r r e (rectangle region to e);
   # 此处省略一个r, 完整语义(C-x r r r e)
   register rectangle region to r
   C-x r i r (rectangle insert to r )
4. Saving Window Configurations in Registers
   C-x r w w (register window to r)
   # 很好用的命令, 可以早上8点保存一个布局,晚上再看看, 临时记住的布局用winner-mode
   C-x r f f (register frameset to f)
   C-x r j f (jump)
5. Keeping Numbers in Registers
   No practical value.
6. Keeping File Names in Registers
   (set-register r '(file . name))
   (set-register ?z '(file . "/gd/gnu/emacs/19.0/src/ChangeLog")
   # prelude for bookmarks
7. Keyboard Macro Registers
   --
8. Bookmarks
   C-x r m (register bookmark for the current file)
   C-x r m  a-name
   C-x r M (not overwrite)
   C-x r b bookmark (jump or write)
   C-x r l (list all bookmarks)
   M-x bookmark-save
   M-x bookmark-load filename
   M-x bookmark-write filename
   M-x bookmark-delete bookmark
   M-x bookmark-insert-location bookmark



















* 04.Emacs as a Notebook by Org
* 05.Emacs as a Agenda by Org
* 06.Org your life all-in-one as  book manager, database manager, memory manager etc
* 07.Programming
* 08.Assistance to Programing
* 09.Literate Programming

* Appendix A: Learn by raise quesiton and harvest answer.
* Appendix B: Git Version Control

|-----------------------+------------------------------+----------------------------------------------|
| Objects               | Features                     | Actions:                                     |
|-----------------------+------------------------------+----------------------------------------------|
| 0.Introduction        |                              |                                              |
|                       | Faster commands              |                                              |
|                       | Stability                    |                                              |
|                       | Isolated Environments        |                                              |
|                       | Efficient Merging            |                                              |
|-----------------------+------------------------------+----------------------------------------------|
| 1.Overview            | Objects:                     | Actions:                                     |
|                       | 1.working directory          | configure                                    |
|                       | 2.staging area               | recording                                    |
|                       | 3.Commit history             | undoing                                      |
|                       | 4.developmnent branches      | branch (non-linear)                          |
|                       | 5.remotes                    | remote                                       |
|-----------------------+------------------------------+----------------------------------------------|
| 2.Configuration       | 1) User Info:                |                                              |
|                       |                              | git config --global user.name                |
|                       |                              | git config --global user.email               |
|                       | 2) Editor:                   |                                              |
|                       |                              | git config --global core.editor emacs        |
|                       | 3) Alias:                    |                                              |
|                       |                              | git config --global alias.ci commit          |
|                       | .inspect                     |                                              |
|                       |                              | git config -l                                |
|-----------------------+------------------------------+----------------------------------------------|
|                       | help:                        | git help log                                 |
|                       |                              | man git-log                                  |
|                       |                              | tldr git-log                                 |
|-----------------------+------------------------------+----------------------------------------------|
| 3.Recoding Chaneges   |                              |                                              |
|                       | Staging area:                |                                              |
|                       |                              | git add                                      |
|                       |                              | git rm --cached                              |
|                       | .inspecting:                 |                                              |
|                       |                              | git status                                   |
|                       |                              | git diff (--cached)                          |
|-----------------------+------------------------------+----------------------------------------------|
|                       | Commits                      |                                              |
|                       |                              | git commit                                   |
|                       | .inspecting                  |                                              |
|                       |                              | git log                                      |
|                       |                              | git log --oneline  <file>                    |
|                       |                              | git log <since> ... <until>                  |
|                       | Tagging commit               |                                              |
|                       |                              | git tag -a v1.0  'stable version'            |
|-----------------------+------------------------------+----------------------------------------------|
| 4.Undoing Changes     | 1) Woriking directory        |                                              |
|                       |                              |                                              |
|                       |                              | git reset --hard HEAD                        |
|                       |                              | git clean -f (git rid of unstaged files)     |
|                       | .individual file:            |                                              |
|                       |                              | git checkout HEAD <file> (most frequent)     |
|-----------------------+------------------------------+----------------------------------------------|
|                       | 2) Staging area              |                                              |
|                       |                              | git reset HEAD <file> (extra staged file)    |
|                       |                              | (No --hard here)                             |
|-----------------------+------------------------------+----------------------------------------------|
|                       | 3) Commits                   |                                              |
|                       | .resetting                   |                                              |
|                       |                              | git reset HEAD~1                             |
|                       | .reverting                   |                                              |
|                       |                              | git revert <commit-id> (created new commit ) |
|                       | .ameding                     |                                              |
|                       |                              | git commit --amend                           |
|-----------------------+------------------------------+----------------------------------------------|
| 5.Branches            | 1) Manipulate brnaches       |                                              |
|                       | .listing branches            |                                              |
|                       |                              | git branch                                   |
|                       | .creating branches           |                                              |
|                       |                              | git branch <name>                            |
|                       |                              | git checkout -b <name>                       |
|                       |                              | .git/refs/heads/develop                      |
|                       | .deleting branches           |                                              |
|                       |                              | git branch -d, -D                            |
|                       |                              |                                              |
|                       | Checking out branches        |                                              |
|                       |                              | git checkout  <branch>                       |
|                       | .detached                    |                                              |
|                       |                              | git checkout -b <new-branch-name>            |
|-----------------------+------------------------------+----------------------------------------------|
|                       | 2) Merging branches          |                                              |
|                       | .fast-forward:               |                                              |
|                       |                              | git checkout master                          |
|                       |                              | git merge some-feature                       |
|                       | .3-way merge:                |                                              |
|                       |                              | same as the above                            |
|                       | .merge conflicts             |                                              |
|                       |                              | <<<<<<HEAD                                   |
|                       |                              | ==================                           |
|                       |                              | >>>>> some-feature                           |
|-----------------------+------------------------------+----------------------------------------------|
|                       | 3) Branches workflow         |                                              |
|                       | .types of branches           |                                              |
|                       |                              | permanent or topic                           |
|                       | .permanent_branch            |                                              |
|                       |                              | master(public ), develop,                    |
|                       | .topic_branch                |                                              |
|                       |                              | feature and hotfix                           |
|-----------------------+------------------------------+----------------------------------------------|
|                       | 4) Rebasing:                 |                                              |
|                       |                              | git checkout some-feature                    |
|                       |                              | git rebase master                            |
|-----------------------+------------------------------+----------------------------------------------|
|                       | .interactive_rebasing:       |                                              |
|                       |                              | git rebase -i master                         |
|                       |                              | (Notice for rewriting)                       |
|-----------------------+------------------------------+----------------------------------------------|
| 6.Remote Repositories |                              |                                              |
|                       | 1) Manipulate remotes:       |                                              |
|                       | .listing remotes:            |                                              |
|                       |                              | git remote                                   |
|                       |                              | git remote -v                                |
|                       | .creating_remotes:           |                                              |
|                       |                              | git remote add <name> <path-to-repo.         |
|                       | .deleting_remotes:           |                                              |
|                       |                              | git remote rm <remote-name>                  |
|-----------------------+------------------------------+----------------------------------------------|
|                       | 2) Remote branches:          |                                              |
|                       | .fetching_remote_branches    |                                              |
|                       |                              | git fetch <remote> <branch>                  |
|                       |                              | git branch -r                                |
|                       | .inspecting_remote_branches: |                                              |
|                       |                              | git log origin/master                        |
|                       | .merging/rebsing:            |                                              |
|                       |                              | git checkout some-feature                    |
|                       |                              | git fetch origin                             |
|                       |                              | git merge origin/master                      |
|                       |                              | (littered with meaninglesss merge commits)   |
|                       |                              |                                              |
|                       |                              | git checkout some-feature                    |
|                       |                              | git fetch origin                             |
|                       |                              | git rebase origin/master                     |
|                       | .pulling:                    |                                              |
|                       |                              | git pull origin/master (--rebase )           |
|                       | .pushing:                    |                                              |
|                       |                              | git push <remote> <branch>                   |
|                       |                              |                                              |
|-----------------------+------------------------------+----------------------------------------------|
|                       | 3) Remote workflow:          |                                              |
|                       | .bare_repository:            |                                              |
|                       |                              | git init --bare <path>                       |
|                       | .centralized_workflow:       |                                              |
|                       |                              | git fetch origin master                      |
|                       |                              | git rebase origin/master                     |
|                       |                              | git push                                     |
|                       | .integrator_workflow:        |                                              |
|                       |                              | github的模式                                 |
|-----------------------+------------------------------+----------------------------------------------|
| Conclusion            |                              |                                              |
|                       | 1.working directory          |                                              |
|                       | 2.staging area               |                                              |
|                       | 3.commit history             |                                              |
|                       | 4.branches                   |                                              |
|                       | 5.remotes                    |                                              |
|-----------------------+------------------------------+----------------------------------------------|

- detached
Note: checking out '1a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at 613ae49 Chapter 1: initial version (1a)



* Appendix Z: Plan Outline
策略便是从这里写好之后复制到master中去.
总体思路:
第一步是: 先整理和分析绑定键, 不能凭空就抛出来一个东西.
在引言里的承诺便是如此.
快捷键, 按照使用习惯和日常的工作流整理.

第二章中, 简要介绍绑定键, 是担心如果过分展开, 则在没有做一点儿具体的事情之前, 全部在聊快捷键, 真是索然无味.

第三章的思路,
dired的起手式先从map的比喻开始, 一颗倒置的树, 构思与正文部分的衔接, 耗费时间.
第三章的难点是要懂一点儿命令行的基本操作, 不如前两章零基础.
是要先跑步架构起来,
晚上更新第三章,
录制小视频的形式是备选方案, 但是偏离成书的基本路线.

第四章的思路:
基本思路还是先用Meta, Ctrl以及Semantic Binding分析Key-binding,
Note的基本思路都理顺一遍, outline大纲结构, table, list,
发布第四章的时间节点是周六或者周日, 写一篇大文章"拿'硬功夫'阅读一本书", 作为第四五六章的序曲.

暂无归类的内容:
undo tree
diff
